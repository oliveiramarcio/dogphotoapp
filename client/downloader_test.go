package main

import (
	"encoding/base64"
	"encoding/binary"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGetAndSavePhoto(t *testing.T) {
	tempDir, err := ioutil.TempDir("", "photos")
	assert.NoError(t, err, "failed to create temporary directory")
	defer os.RemoveAll(tempDir)

	base64Str := "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAADMElEQVR4nOzVwQnAIBQFQYXff81RUkQCOyDj1YOPnbXWPmeTRef+/3O/OyBjzh3CD95Bfqnhf4QtqobAAAAAElFTkSuQmCC"
	decodedData, err := base64.StdEncoding.DecodeString(base64Str)
	assert.NoError(t, err, "failed to decode image data")

	mockServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "image/jpeg")
		w.WriteHeader(http.StatusOK)

		_, err = w.Write(decodedData)
		assert.NoError(t, err, "failed to write image data")
	}))
	defer mockServer.Close()

	err = downloadAndSavePhoto(tempDir, mockServer.URL)

	urlChecksum := calculateMD5(mockServer.URL)
	assert.NoError(t, err, "unexpected error occurred")

	fileName := filepath.Join(tempDir, urlChecksum) + ".jpg"
	assert.FileExists(t, fileName, "file was not saved")

	b, err := os.ReadFile(fileName)
	assert.NoError(t, err, "faile to read saved file")
	assert.Equal(t, binary.Size(decodedData), binary.Size(b))
	assert.Equal(t, decodedData, b)
}
