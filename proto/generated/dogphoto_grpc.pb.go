// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: dogphoto.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DogPhotoService_GetDogPhoto_FullMethodName = "/DogPhotoService/GetDogPhoto"
)

// DogPhotoServiceClient is the client API for DogPhotoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DogPhotoServiceClient interface {
	GetDogPhoto(ctx context.Context, in *DogPhotoRequest, opts ...grpc.CallOption) (*DogPhotoResponse, error)
}

type dogPhotoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDogPhotoServiceClient(cc grpc.ClientConnInterface) DogPhotoServiceClient {
	return &dogPhotoServiceClient{cc}
}

func (c *dogPhotoServiceClient) GetDogPhoto(ctx context.Context, in *DogPhotoRequest, opts ...grpc.CallOption) (*DogPhotoResponse, error) {
	out := new(DogPhotoResponse)
	err := c.cc.Invoke(ctx, DogPhotoService_GetDogPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DogPhotoServiceServer is the server API for DogPhotoService service.
// All implementations must embed UnimplementedDogPhotoServiceServer
// for forward compatibility
type DogPhotoServiceServer interface {
	GetDogPhoto(context.Context, *DogPhotoRequest) (*DogPhotoResponse, error)
	mustEmbedUnimplementedDogPhotoServiceServer()
}

// UnimplementedDogPhotoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDogPhotoServiceServer struct {
}

func (UnimplementedDogPhotoServiceServer) GetDogPhoto(context.Context, *DogPhotoRequest) (*DogPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDogPhoto not implemented")
}
func (UnimplementedDogPhotoServiceServer) mustEmbedUnimplementedDogPhotoServiceServer() {}

// UnsafeDogPhotoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DogPhotoServiceServer will
// result in compilation errors.
type UnsafeDogPhotoServiceServer interface {
	mustEmbedUnimplementedDogPhotoServiceServer()
}

func RegisterDogPhotoServiceServer(s grpc.ServiceRegistrar, srv DogPhotoServiceServer) {
	s.RegisterService(&DogPhotoService_ServiceDesc, srv)
}

func _DogPhotoService_GetDogPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DogPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogPhotoServiceServer).GetDogPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DogPhotoService_GetDogPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogPhotoServiceServer).GetDogPhoto(ctx, req.(*DogPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DogPhotoService_ServiceDesc is the grpc.ServiceDesc for DogPhotoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DogPhotoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DogPhotoService",
	HandlerType: (*DogPhotoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDogPhoto",
			Handler:    _DogPhotoService_GetDogPhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dogphoto.proto",
}
